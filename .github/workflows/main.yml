name: Deploy Frontend to Azure Staging

on:
  push:
    branches:
      - main # Trigger on push to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Staging # Target the Staging environment
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # 1. Login to Azure using a service principal/credentials
      - name: Azure Login
        uses: azure/login@v2
        with:
          # This Service Principal must have access to the Resource Group containing the Web App.
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      # 2. Login to Azure Container Registry (ACR)
      - name: ACR Login
        uses: docker/login-action@v3
        with:
          registry: [YOUR_ACR_LOGIN_SERVER]
          # These are the shared ACR admin credentials
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}
      
      # 3. Build and Push the Docker Image
      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # CRITICAL CHANGE: Use the Git SHA for a unique tag. This guarantees the latest image is deployed.
          tags: ${{ env.AZURE_CR_LOGIN_SERVER }}/frontend-app:${{ github.sha }}
          file: Dockerfile
          # Build arguments can be passed here if needed, but the current Dockerfile handles the staging env fine.
      
      # 4. Deploy the new image to the Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: [YOUR_FRONTEND_WEB_APP_NAME]
          # Use 'production' if your Web App is configured as a single slot,
          # or the name of a specific Staging slot.
          slot-name: 'production'
          # USE THE SAME UNIQUE TAG FOR DEPLOYMENT
          images: ${{ env.AZURE_CR_LOGIN_SERVER }}/frontend-app:${{ github.sha }}